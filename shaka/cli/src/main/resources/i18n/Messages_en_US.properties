Command.decode=Disassembles a apk/dex file.
Command.decode.force=Force delete destination directory.
Command.decode.output=The directory to write the disassembled files to.
Command.decode.noRes=Do not decode resources.
Command.decode.noSrc=Do not decode sources.
Command.decode.frameTag=Uses framework files tagged by <tag>.
Command.decode.apiLevel=The numeric api level of the file being disassembled.
Command.decode.keepBrokenRes=Use if there was an error and some resources were dropped, e.g. "Invalid config flags detected. Dropping resources", but you want to decode them anyway, even with errors. You will have to fix them manually before building.
Command.decode.matchOriginal=Keeps files to closest to original as possible. Prevents rebuild.
Command.decode.debugInfo=Whether to include debug information in the output (.local, .param, .line, etc.). True by default, use --debug-info=false to disable.
Command.decode.codeOffsets=Add a comment before each instruction with it's code offset within the method.
Command.decode.resourceIdFiles=This will attempt to find any resource id references within the bytecode and add a comment with the name of the resource being referenced. The parameter accepts 2 values:an arbitrary resource prefix and the path to a public.xml file. For example: --resolve-resources android.R framework/res/values/public.xml. This option can be specified multiple times to provide resources from multiple packages.
Command.decode.jobs=The number of threads to use. Defaults to the number of cores available.
Command.decode.localsDirective=When disassembling, output the .locals directive with the number of non-parameter registers instead of the .registers directive with the total number of registers.
Command.decode.accessorComments=Generate helper comments for synthetic accessors. True by default, use --accessor-comments=false to disable.
Command.decode.normalizeVirtualMethods=Normalize virtual method references to use the base class where the method is originally declared.
Command.decode.parameterRegisters=Use the pNN syntax for registers that refer to a method parameter on method entry. True by default, use --parameter-registers=false to disable.
Command.decode.registerInfoTypes=Add comments before/after each instruction with information about register types. The value is a comma-separated list of any of ALL, ALLPRE, ALLPOST, ARGS, DEST, MERGE and FULLMERGE. See "baksmali help register-info" for more information.
Command.decode.sequentialLabels=Create label names using a sequential numbering scheme per label type, rather than using the bytecode address.
Command.decode.implicitReferences=Use implicit method and field references (without the class name) for methods and fields from the current class.
Command.decode.allowOdex=Allows odex opcodes to be disassembled, even if the result won't be able to be reassembled.
Command.decode.classes=A comma separated list of classes. Only disassemble these classes
Command.decode.inputList=A dex/apk/oat/odex file.
Command.decode.framePath=Uses framework files located in <dir>.
Command.decode.quiet=suppress all output including errors.
Command.decode.verbose=Generate verbose error messages.
Command.decode.help=Show usage information for this command.
Command.build=build files into a apk file.
Command.build.copyOriginal=Copies original AndroidManifest.xml and META-INF. See project page for more info.
Command.build.aaptPath=Loads aapt from specified location.
Command.build.defaultFramework=Using default framework file.
Command.build.forceAll=Skip changes detection and build all files.
Command.build.output=The name of apk that gets written. Default is dist/name.apk
Command.build.inputList=decode directory.
Command.build.framePath=Uses framework files located in <dir>.
Command.build.quiet=suppress all output including errors.
Command.build.verbose=Generate verbose error messages.
Command.build.help=Show usage information for this command.
Command.install-framework=install framework file.
Command.install-framework.tag=Tag frameworks using <tag>.
Command.install-framework.inputList=A apk file.
Command.install-framework.framePath=Uses framework files located in <dir>.
Command.install-framework.quiet=suppress all output including errors.
Command.install-framework.verbose=Generate verbose error messages.
Command.install-framework.help=Show usage information for this command.
Command.publicize-resources=publicize resources file
Command.publicize-resources.inputList=A arsc file.
Command.publicize-resources.quiet=suppress all output including errors.
Command.publicize-resources.verbose=Generate verbose error messages.
Command.publicize-resources.help=Show usage information for this command.
Command.empty-framework-dir=empty framework dir
Command.empty-framework-dir.force=Force delete destination directory.
Command.empty-framework-dir.framePath=Uses framework files located in <dir>.
Command.empty-framework-dir.quiet=suppress all output including errors.
Command.empty-framework-dir.verbose=Generate verbose error messages.
Command.empty-framework-dir.help=Show usage information for this command.
Command.disassemble=Disassembles a dex file.
Command.disassemble.help=Show usage information for this command.
Command.disassemble.debugInfo=Whether to include debug information in the output (.local, .param, .line, etc.). True by default, use --debug-info=false to disable.
Command.disassemble.codeOffsets=Add a comment before each instruction with it's code offset within the method.
Command.disassemble.resourceIdFiles=This will attempt to find any resource id references within the bytecode and add a comment with the name of the resource being referenced. The parameter accepts 2 values:an arbitrary resource prefix and the path to a public.xml file. For example: --resolve-resources android.R framework/res/values/public.xml. This option can be specified multiple times to provide resources from multiple packages.
Command.disassemble.jobs=The number of threads to use. Defaults to the number of cores available.
Command.disassemble.localsDirective=When disassembling, output the .locals directive with the number of non-parameter registers instead of the .registers directive with the total number of registers.
Command.disassemble.accessorComments=Generate helper comments for synthetic accessors. True by default, use --accessor-comments=false to disable.
Command.disassemble.normalizeVirtualMethods=Normalize virtual method references to use the base class where the method is originally declared.
Command.disassemble.outputDir=The directory to write the disassembled files to.
Command.disassemble.parameterRegisters=Use the pNN syntax for registers that refer to a method parameter on method entry. True by default, use --parameter-registers=false to disable.
Command.disassemble.registerInfoTypes=Add comments before/after each instruction with information about register types. The value is a comma-separated list of any of ALL, ALLPRE, ALLPOST, ARGS, DEST, MERGE and FULLMERGE. See "baksmali help register-info" for more information.
Command.disassemble.sequentialLabels=Create label names using a sequential numbering scheme per label type, rather than using the bytecode address.
Command.disassemble.implicitReferences=Use implicit method and field references (without the class name) for methods and fields from the current class.
Command.disassemble.allowOdex=Allows odex opcodes to be disassembled, even if the result won't be able to be reassembled.
Command.disassemble.classes=A comma separated list of classes. Only disassemble these classes
Command.disassemble.apiLevel=The numeric api level of the file being disassembled.
Command.disassemble.inputList=A dex/apk/oat/odex file. For apk or oat files that contain multiple dex files, you can specify the specific entry to use as if the apk/oat file was a directory. e.g. "app.apk/classes2.dex". For more information, see "baksmali help input".
Command.deodex=Deodexes an odex/oat file
Command.deodex.inlineTable=Specify a file containing a custom inline method table to use. See the "deodexerant" tool in the smali github repository to dump the inline method table from a device that uses dalvik.
Command.deodex.help=Show usage information for this command.
Command.deodex.debugInfo=Whether to include debug information in the output (.local, .param, .line, etc.). True by default, use --debug-info=false to disable.
Command.deodex.codeOffsets=Add a comment before each instruction with it's code offset within the method.
Command.deodex.resourceIdFiles=This will attempt to find any resource id references within the bytecode and add a comment with the name of the resource being referenced. The parameter accepts 2 values:an arbitrary resource prefix and the path to a public.xml file. For example: --resolve-resources android.R framework/res/values/public.xml. This option can be specified multiple times to provide resources from multiple packages.
Command.deodex.jobs=The number of threads to use. Defaults to the number of cores available.
Command.deodex.localsDirective=When disassembling, output the .locals directive with the number of non-parameter registers instead of the .registers directive with the total number of registers.
Command.deodex.accessorComments=Generate helper comments for synthetic accessors. True by default, use --accessor-comments=false to disable.
Command.deodex.normalizeVirtualMethods=Normalize virtual method references to use the base class where the method is originally declared.
Command.deodex.outputDir=The directory to write the disassembled files to.
Command.deodex.parameterRegisters=Use the pNN syntax for registers that refer to a method parameter on method entry. True by default, use --parameter-registers=false to disable.
Command.deodex.registerInfoTypes=Add comments before/after each instruction with information about register types. The value is a comma-separated list of any of ALL, ALLPRE, ALLPOST, ARGS, DEST, MERGE and FULLMERGE. See "baksmali help register-info" for more information.
Command.deodex.sequentialLabels=Create label names using a sequential numbering scheme per label type, rather than using the bytecode address.
Command.deodex.implicitReferences=Use implicit method and field references (without the class name) for methods and fields from the current class.
Command.deodex.allowOdex=Allows odex opcodes to be disassembled, even if the result won't be able to be reassembled.
Command.deodex.classes=A comma separated list of classes. Only disassemble these classes
Command.deodex.apiLevel=The numeric api level of the file being disassembled.
Command.deodex.inputList=A dex/apk/oat/odex file. For apk or oat files that contain multiple dex files, you can specify the specific entry to use as if the apk/oat file was a directory. e.g. "app.apk/classes2.dex". For more information, see "baksmali help input".
Command.dump=Prints an annotated hex dump for the given dex file
Command.dump.help=Show usage information for this command.
Command.dump.apiLevel=The numeric api level of the file being disassembled.
Command.dump.inputList=A dex/apk/oat/odex file. For apk or oat files that contain multiple dex files, you can specify the specific entry to use as if the apk/oat file was a directory. e.g. "app.apk/classes2.dex". For more information, see "baksmali help input".
Command.list=Lists various objects in a dex file.
Command.list.help=Show usage information
Command.assemble=Assembles smali files into a dex file.
Command.assemble.help=Show usage information for this command.
Command.assemble.jobs=The number of threads to use. Defaults to the number of cores available.
Command.assemble.apiLevel=The numeric api level to use while assembling.
Command.assemble.output=The name/path of the dex file to write.
Command.assemble.verbose=Generate verbose error messages.
Command.assemble.allowOdexOpcodes=Allows the odex opcodes that dalvik doesn't reject to be assembled.
Command.assemble.input=Assembles the given files. If a directory is specified, it will be recursively searched for any files with a .smali prefix